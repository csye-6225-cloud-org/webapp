name: Packer Custom Image Build

on: 
  pull_request:
    types:
      - closed
    branches: [ "main" ]

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    name: Packer Custom Image Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # - name: Configure GCP ADC creds
      #   run: |
      #     touch gcp-adc-creds.json
      #     echo '${{ secrets.GCP_SECURITY_CREDENTIALS }}' > gcp-adc-creds.json
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=gcp-adc-creds.json" >> $GITHUB_ENV

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SVC_ACC_CREDS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'

      - uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: ${{ secrets.POSTGRES_USERNAME }}
          password: ${{ secrets.POSTGRES_PASSWORD }}
          database: ${{ secrets.POSTGRES_DATABASE }}
          port: 5432
        id: postgres

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
        with:
          version: '1.7'
      
      - name: 'Set db from repo secret'
        run: |
          jq '.PASSWORD = $newVal' --arg newVal '${{ secrets.POSTGRES_PASSWORD }}' app/config/db.config.json > tmp.$$.json && mv tmp.$$.json app/config/db.config.json

      - run: npm ci
      - run: touch webapp.log
      - run: ENVI='TEST' LOG_PATH='webapp.log' npm test

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: '1.10.1'

      - name: Run `packer init`
        id: init
        run: "packer init ."

      - name: Run `packer fmt`
        id: fmt
        run: "packer fmt ."

      - name: Run `zip`
        id: zip
        run: "zip -r webapp.zip ./"

      - name: Configure GCP creds
        run: |
          touch gcp-creds.json
          echo '${{ secrets.GCP_SVC_ACC_CREDS }}' > gcp-creds.json

      - name: Run `packer validate`
        id: validate
        run: "packer validate ."

      - name: Run `packer build`
        id: build
        run: |
          PACKER_LOG=1 packer build -parallel-builds=1 -force build.pkr.hcl
        env: 
          CI: ""
          GCP_SECURITY_CREDENTIALS: ${{ secrets.GCP_SECURITY_CREDENTIALS}}
      
      - name: Get image name from manifest.json and set epoch timestamp
        run: |
          echo "IMAGE_NAME=$(cat manifest.json | jq -r '.builds[0].artifact_id')" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Edit startup script
        run: |
          sed -i "s/DBHOSTTOREPLACE/${{ secrets.DBHOST }}/" metadata.sh
          sed -i "s/DBPASSTOREPLACE/${{ secrets.DBPASS }}/" metadata.sh
          sed -i "s/DBUSERTOREPLACE/${{ secrets.DBUSER }}/" metadata.sh
          sed -i "s/DBDBTOREPLACE/${{ secrets.DBDB }}/" metadata.sh
        
      - name: Create instance template using image
        run: |
          echo $IMAGE_NAME
          cat metadata.sh
          gcloud compute instance-templates create webapp-template-cd-$TIMESTAMP \
          --project=${{ secrets.GCP_PROJECT }} \
          --region=${{ secrets.GCP_REGION }} \
          --instance-template-region=${{ secrets.GCP_REGION }} \
          --description="This template is used to create webapp instance- continuous delivery version" \
          --machine-type=e2-medium \
          --create-disk image=$IMAGE_NAME,image-project=${{ secrets.GCP_PROJECT }},size=100GB,type=pd-balanced,boot=yes,auto-delete=yes,kms-key=${{ secrets.KMS_KEY }} \
          --metadata-from-file startup-script=metadata.sh \
          --network-interface network=${{ secrets.GCP_NET_NAME }},subnet=${{ secrets.GCP_SUBNET_NAME }},no-address \
          --tags=webapp-server \
          --service-account=${{ secrets.GCP_SVC_ACC_EMAIL }} \
          --scopes=https://www.googleapis.com/auth/logging.admin,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/pubsub

      - name: Configure managed instance group to use new template
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.GCP_IGM_NAME }}  \
          --region=${{ secrets.GCP_REGION }} \
          --version="template=projects/${{ secrets.GCP_PROJECT }}/regions/${{ secrets.GCP_REGION }}/instanceTemplates/webapp-template-cd-$TIMESTAMP" \
          --type="proactive" \
          --max-surge=${{ vars.GCP_IGM_SURGE }} \
          --max-unavailable=${{ vars.GCP_IGM_UNAVAILABLE }} \
          --minimal-action=replace \
          --replacement-method=substitute

      - name: Verify that changes have successfully propogated
        run: |
          set -e
          gcloud compute instance-groups managed wait-until ${{ secrets.GCP_IGM_NAME }} \
          --version-target-reached \
          --region=${{ secrets.GCP_REGION }}
          echo "CI/CD WORKFLOW COMPLETED"
        # echo $?
        # (exit 4)
        # echo "Testing to see if exit code 4 interrupts workflow- update: it does"
          